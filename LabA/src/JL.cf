PDefs.   Program ::= [Def] ;

DFun.    Def    ::= Type Id "(" [Arg] ")" "{" [Stm] "}" ;

terminator Def "" ;

ADecl.   Arg    ::= Type Id ;

separator Arg "," ;

SExp.    Stm    ::= Exp ";" ;
SDecls.  Stm    ::= Type [Id] ";" ;
SInit.   Stm    ::= Type [Id] "=" Exp ";" ;

SReturn.        Stm ::= "return" ReturnRest ;
ReturnRest.     ReturnRest ::= Exp ";" ;
ReturnRestEmpt. ReturnRest ::=     ";" ; 

SWhile.  Stm    ::= "while" "(" Exp ")" Stm ;
SBlock.  Stm    ::= "{" [Stm] "}" ;

SForeach. Stm ::= "for" "(" Type Id ":" Id ")" Stm ;

SIf.     Stm    ::= "if" "(" Exp ")" IfRest ;
IfR.     IfRest ::= Stm IfRestRest ;
IfRE.    IfRest ::= ";" ;
IfRREl.  IfRestRest ::= "else" Stm ;
IfRRE.   IfRestRest ::=  ;

terminator Stm "" ;

ETrue.   Exp15  ::= "true" ;
EFalse.  Exp15  ::= "false" ;
EString. Exp15  ::= String  ;
EInt.    Exp15  ::= Integer ;
EDouble. Exp15  ::= Double ;
EId.     Exp15  ::= Id ;
EIdArr.  Exp15  ::= Id [InBr] ;

EApp.    Exp15  ::= Id "(" [Exp] ")" ;

ENeg.       Exp14  ::= "-"  Exp14 ;
ENot.       Exp14  ::= "!"  Exp14 ;
EPostIncr.  Exp14  ::= Exp15 "++" ;
EPostDecr.  Exp14  ::= Exp15 "--" ;
ELength.    Exp14  ::= Exp15 "."  "length" ;

EPreIncr.   Exp13  ::= "++" Exp14 ;
EPreDecr.   Exp13  ::= "--" Exp14 ;

ETimes.  Exp12  ::= Exp12 "*"  Exp13 ;
EDiv.    Exp12  ::= Exp12 "/"  Exp13 ;
EMod.    Exp12  ::= Exp12 "%"  Exp13 ;
EPlus.   Exp11  ::= Exp11 "+"  Exp12 ;
EMinus.  Exp11  ::= Exp11 "-"  Exp12 ;
ELt.     Exp9   ::= Exp10 "<"  Exp10 ;
EGt.     Exp9   ::= Exp10 ">"  Exp10 ;
ELtEq.   Exp9   ::= Exp10 "<=" Exp10 ;
EGtEq.   Exp9   ::= Exp10 ">=" Exp10 ;
EEq.     Exp8   ::= Exp9  "==" Exp9 ;
ENEq.    Exp8   ::= Exp9  "!=" Exp9 ;
EAnd.    Exp4   ::= Exp4  "&&" Exp5 ;
EOr.     Exp3   ::= Exp3  "||" Exp4 ;
ENew.    Exp3   ::= "new" Type [InBr] ;
EAss.    Exp2   ::= Exp3  "="  Exp2 ;


coercions Exp 15 ;

separator Exp "," ;

rules Type   ::= "true" | "false" | "int" | "double" | "void" | "string" | "bool_undef" | "boolean" ;


TypeArr. Type ::= Type [EmptBr] ;

EmptBr. EmptBr ::= "[" "]" ;
separator nonempty EmptBr "" ;

InBr.   InBr   ::= "[" Exp "]" ;
separator nonempty InBr "" ;

token Id (letter (letter | digit | '_')*)  ;
separator nonempty Id "," ;



comment "#" ;
comment "//" ;
comment "/*" "*/" ;

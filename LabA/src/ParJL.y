-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module ParJL where
import AbsJL
import LexJL
import ErrM

}

%name pProgram Program
%name pDef Def
%name pListDef ListDef
%name pArg Arg
%name pListArg ListArg
%name pStm Stm
%name pReturnRest ReturnRest
%name pIfRest IfRest
%name pIfRestRest IfRestRest
%name pListStm ListStm
%name pExp15 Exp15
%name pExp14 Exp14
%name pExp13 Exp13
%name pExp12 Exp12
%name pExp11 Exp11
%name pExp9 Exp9
%name pExp8 Exp8
%name pExp4 Exp4
%name pExp3 Exp3
%name pExp2 Exp2
%name pExp Exp
%name pExp1 Exp1
%name pExp5 Exp5
%name pExp6 Exp6
%name pExp7 Exp7
%name pExp10 Exp10
%name pListExp ListExp
%name pType Type
%name pEmptBr EmptBr
%name pListEmptBr ListEmptBr
%name pInBr InBr
%name pListInBr ListInBr
%name pListId ListId
-- no lexer declaration
%monad { Err } { thenM } { returnM }
%tokentype {Token}
%token
  '!' { PT _ (TS _ 1) }
  '!=' { PT _ (TS _ 2) }
  '%' { PT _ (TS _ 3) }
  '&&' { PT _ (TS _ 4) }
  '(' { PT _ (TS _ 5) }
  ')' { PT _ (TS _ 6) }
  '*' { PT _ (TS _ 7) }
  '+' { PT _ (TS _ 8) }
  '++' { PT _ (TS _ 9) }
  ',' { PT _ (TS _ 10) }
  '-' { PT _ (TS _ 11) }
  '--' { PT _ (TS _ 12) }
  '.' { PT _ (TS _ 13) }
  '/' { PT _ (TS _ 14) }
  ':' { PT _ (TS _ 15) }
  ';' { PT _ (TS _ 16) }
  '<' { PT _ (TS _ 17) }
  '<=' { PT _ (TS _ 18) }
  '=' { PT _ (TS _ 19) }
  '==' { PT _ (TS _ 20) }
  '>' { PT _ (TS _ 21) }
  '>=' { PT _ (TS _ 22) }
  '[' { PT _ (TS _ 23) }
  ']' { PT _ (TS _ 24) }
  'bool_undef' { PT _ (TS _ 25) }
  'boolean' { PT _ (TS _ 26) }
  'double' { PT _ (TS _ 27) }
  'else' { PT _ (TS _ 28) }
  'false' { PT _ (TS _ 29) }
  'for' { PT _ (TS _ 30) }
  'if' { PT _ (TS _ 31) }
  'int' { PT _ (TS _ 32) }
  'length' { PT _ (TS _ 33) }
  'new' { PT _ (TS _ 34) }
  'return' { PT _ (TS _ 35) }
  'string' { PT _ (TS _ 36) }
  'true' { PT _ (TS _ 37) }
  'void' { PT _ (TS _ 38) }
  'while' { PT _ (TS _ 39) }
  '{' { PT _ (TS _ 40) }
  '||' { PT _ (TS _ 41) }
  '}' { PT _ (TS _ 42) }

L_quoted { PT _ (TL $$) }
L_integ  { PT _ (TI $$) }
L_doubl  { PT _ (TD $$) }
L_Id { PT _ (T_Id $$) }


%%

String  :: { String }  : L_quoted {  $1 }
Integer :: { Integer } : L_integ  { (read ( $1)) :: Integer }
Double  :: { Double }  : L_doubl  { (read ( $1)) :: Double }
Id    :: { Id} : L_Id { Id ($1)}

Program :: { Program }
Program : ListDef { AbsJL.PDefs (reverse $1) }
Def :: { Def }
Def : Type Id '(' ListArg ')' '{' ListStm '}' { AbsJL.DFun $1 $2 $4 (reverse $7) }
ListDef :: { [Def] }
ListDef : {- empty -} { [] } | ListDef Def { flip (:) $1 $2 }
Arg :: { Arg }
Arg : Type Id { AbsJL.ADecl $1 $2 }
ListArg :: { [Arg] }
ListArg : {- empty -} { [] }
        | Arg { (:[]) $1 }
        | Arg ',' ListArg { (:) $1 $3 }
Stm :: { Stm }
Stm : Exp ';' { AbsJL.SExp $1 }
    | Type ListId ';' { AbsJL.SDecls $1 $2 }
    | Type ListId '=' Exp ';' { AbsJL.SInit $1 $2 $4 }
    | 'return' ReturnRest { AbsJL.SReturn $2 }
    | 'while' '(' Exp ')' Stm { AbsJL.SWhile $3 $5 }
    | '{' ListStm '}' { AbsJL.SBlock (reverse $2) }
    | 'for' '(' Type Id ':' Id ')' Stm { AbsJL.SForeach $3 $4 $6 $8 }
    | 'if' '(' Exp ')' IfRest { AbsJL.SIf $3 $5 }
ReturnRest :: { ReturnRest }
ReturnRest : Exp ';' { AbsJL.ReturnRest $1 }
           | ';' { AbsJL.ReturnRestEmpt }
IfRest :: { IfRest }
IfRest : Stm IfRestRest { AbsJL.IfR $1 $2 } | ';' { AbsJL.IfRE }
IfRestRest :: { IfRestRest }
IfRestRest : 'else' Stm { AbsJL.IfRREl $2 }
           | {- empty -} { AbsJL.IfRRE }
ListStm :: { [Stm] }
ListStm : {- empty -} { [] } | ListStm Stm { flip (:) $1 $2 }
Exp15 :: { Exp }
Exp15 : 'true' { AbsJL.ETrue }
      | 'false' { AbsJL.EFalse }
      | String { AbsJL.EString $1 }
      | Integer { AbsJL.EInt $1 }
      | Double { AbsJL.EDouble $1 }
      | Id { AbsJL.EId $1 }
      | Id ListInBr { AbsJL.EIdArr $1 $2 }
      | Id '(' ListExp ')' { AbsJL.EApp $1 $3 }
      | '(' Exp ')' { $2 }
Exp14 :: { Exp }
Exp14 : '-' Exp14 { AbsJL.ENeg $2 }
      | '!' Exp14 { AbsJL.ENot $2 }
      | Exp15 '++' { AbsJL.EPostIncr $1 }
      | Exp15 '--' { AbsJL.EPostDecr $1 }
      | Exp15 '.' 'length' { AbsJL.ELength $1 }
      | Exp15 { $1 }
Exp13 :: { Exp }
Exp13 : '++' Exp14 { AbsJL.EPreIncr $2 }
      | '--' Exp14 { AbsJL.EPreDecr $2 }
      | Exp14 { $1 }
Exp12 :: { Exp }
Exp12 : Exp12 '*' Exp13 { AbsJL.ETimes $1 $3 }
      | Exp12 '/' Exp13 { AbsJL.EDiv $1 $3 }
      | Exp12 '%' Exp13 { AbsJL.EMod $1 $3 }
      | Exp13 { $1 }
Exp11 :: { Exp }
Exp11 : Exp11 '+' Exp12 { AbsJL.EPlus $1 $3 }
      | Exp11 '-' Exp12 { AbsJL.EMinus $1 $3 }
      | Exp12 { $1 }
Exp9 :: { Exp }
Exp9 : Exp10 '<' Exp10 { AbsJL.ELt $1 $3 }
     | Exp10 '>' Exp10 { AbsJL.EGt $1 $3 }
     | Exp10 '<=' Exp10 { AbsJL.ELtEq $1 $3 }
     | Exp10 '>=' Exp10 { AbsJL.EGtEq $1 $3 }
     | Exp10 { $1 }
Exp8 :: { Exp }
Exp8 : Exp9 '==' Exp9 { AbsJL.EEq $1 $3 }
     | Exp9 '!=' Exp9 { AbsJL.ENEq $1 $3 }
     | Exp9 { $1 }
Exp4 :: { Exp }
Exp4 : Exp4 '&&' Exp5 { AbsJL.EAnd $1 $3 } | Exp5 { $1 }
Exp3 :: { Exp }
Exp3 : Exp3 '||' Exp4 { AbsJL.EOr $1 $3 }
     | 'new' Type ListInBr { AbsJL.ENew $2 $3 }
     | Exp4 { $1 }
Exp2 :: { Exp }
Exp2 : Exp3 '=' Exp2 { AbsJL.EAss $1 $3 } | Exp3 { $1 }
Exp :: { Exp }
Exp : Exp1 { $1 }
Exp1 :: { Exp }
Exp1 : Exp2 { $1 }
Exp5 :: { Exp }
Exp5 : Exp6 { $1 }
Exp6 :: { Exp }
Exp6 : Exp7 { $1 }
Exp7 :: { Exp }
Exp7 : Exp8 { $1 }
Exp10 :: { Exp }
Exp10 : Exp11 { $1 }
ListExp :: { [Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ',' ListExp { (:) $1 $3 }
Type :: { Type }
Type : 'true' { AbsJL.Type_true }
     | 'false' { AbsJL.Type_false }
     | 'int' { AbsJL.Type_int }
     | 'double' { AbsJL.Type_double }
     | 'void' { AbsJL.Type_void }
     | 'string' { AbsJL.Type_string }
     | 'bool_undef' { AbsJL.Type_bool_undef }
     | 'boolean' { AbsJL.Type_boolean }
     | Type ListEmptBr { AbsJL.TypeArr $1 (reverse $2) }
EmptBr :: { EmptBr }
EmptBr : '[' ']' { AbsJL.EmptBr }
ListEmptBr :: { [EmptBr] }
ListEmptBr : {- empty -} { [] }
           | ListEmptBr EmptBr { flip (:) $1 $2 }
InBr :: { InBr }
InBr : '[' Exp ']' { AbsJL.InBr $2 }
ListInBr :: { [InBr] }
ListInBr : InBr { (:[]) $1 } | InBr ListInBr { (:) $1 $2 }
ListId :: { [Id] }
ListId : Id { (:[]) $1 } | Id ',' ListId { (:) $1 $3 }
{

returnM :: a -> Err a
returnM = return

thenM :: Err a -> (a -> Err b) -> Err b
thenM = (>>=)

happyError :: [Token] -> Err a
happyError ts =
  Bad $ "syntax error at " ++ tokenPos ts ++ 
  case ts of
    [] -> []
    [Err _] -> " due to lexer error"
    _ -> " before " ++ unwords (map (id . prToken) (take 4 ts))

myLexer = tokens
}

